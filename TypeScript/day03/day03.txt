
1.  类
    引用任何一个类成员的时候都用了this。 它表示访问的是类的成员。
    我们使用new构造了Greeter类的一个实例。 它会调用之前定义的构造函数，创建一个Greeter类型的新对象，并执行构造函数初始化它。
    class Greeter{
        greeting : string;
        constructor(message : string){
            this.greeting = message;
        }
        getGreet ()　{
            return console.log('hello' + this.greeting);
        }
    }
    let g = new Greeter('li');
    g.getGreet();
2.  继承
    在TypeScript里，我们可以使用常用的面向对象模式。 基于类的程序设计中一种最基本的模式是允许使用继承来扩展现有的类。
    这个例子展示了最基本的继承：类从基类中继承了属性和方法。 这里，Ngreeter是一个派生类，它派生自Greeter基类，通过extends关键字。 派生类通常被称作子类，基类通常被称作超类。
    派生类包含了一个构造函数，它必须调用super()，它会执行基类的构造函数。 而且，在构造函数里访问this的属性之前，我们一定要调用super()。 这个是TypeScript强制执行的一条重要规则。
3.  公共，私有与受保护的修饰符
    3.1 默认为public
    3.2 理解private
        当成员被标记成private时，它就不能在声明它的类的外部访问
        当我们比较带有private或protected成员的类型的时候，情况就不同了。 如果其中一个类型里包含一个private成员，那么只有当另外一个类型中也存在这样一个private成员， 
        并且它们都是来自同一处声明时，我们才认为这两个类型是兼容的
    3.3 理解protected
        protected修饰符与private修饰符的行为很相似，但有一点不同，protected成员在派生类中仍然可以访问。
        构造函数也可以被标记成protected。 这意味着这个类不能在包含它的类外被实例化，但是能被继承。
    3.4 readonly修饰符
        你可以使用readonly关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化。
    3.5 参数属性
        参数属性可以方便地让我们在一个地方定义并初始化一个成员。
        class Animal {
            constructor(private name: string) { }
            move(distanceInMeters: number) {
                console.log(`${this.name} moved ${distanceInMeters}m.`);
            }
        }
        注意看我们是如何舍弃了theName，仅在构造函数里使用private name: string参数来创建和初始化name成员。 我们把声明和赋值合并至一处。
        参数属性通过给构造函数参数添加一个访问限定符来声明。 使用private限定一个参数属性会声明并初始化一个私有成员；对于public和protected来说也是一样。
4.  存取器
    TypeScript支持通过getters/setters来截取对对象成员的访问。 它能帮助你有效的控制对对象成员的访问。
    首先，存取器要求你将编译器设置为输出ECMAScript 5或更高。 不支持降级到ECMAScript 3。 其次，只带有get不带有set的存取器自动被推断为readonly。 
    这在从代码生成.d.ts文件时是有帮助的，因为利用这个属性的用户会看到不允许够改变它的值。

5.  静态属性
6.  抽象类
    抽象类做为其它派生类的基类使用。 它们一般不会直接被实例化。 不同于接口，抽象类可以包含成员的实现细节。 abstract关键字是用于定义抽象类和在抽象类内部定义抽象方法。
7.  高级技巧
    7.1 构造函数
        当你在TypeScript里声明了一个类的时候，实际上同时声明了很多东西。 首先就是类的实例的类型。
        class Greeter {
            greeting: string;
            constructor(message: string) {
                this.greeting = message;
            }
            greet() {
                return "Hello, " + this.greeting;
            }
        }

        let greeter: Greeter;
        greeter = new Greeter("world");
        console.log(greeter.greet());
        我们写了let greeter: Greeter，意思是Greeter类的实例的类型是Greeter。
    7.2 把类当做接口使用
        类定义会创建两个东西：类的实例类型和一个构造函数。 因为类可以创建出类型，所以你能够在允许使用接口的地方使用类。
        
