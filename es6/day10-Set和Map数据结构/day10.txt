1.Set
	ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。

	const set = new Set([1, 2, 3, 4, 4]);
	[...set] 
	// [1, 2, 3, 4]

	// 去除数组的重复成员方法一
	[...new Set(array)]

	Array.from方法可以将 Set 结构转为数组。

	// 去除数组的重复成员方法二
	Array.from(new Set(array))

	Set 实例的属性和方法:

	/**
	 *	操作方法：
	 *	add(value)：添加某个值，返回 Set 结构本身。
	 *	delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。
	 * 	has(value)：返回一个布尔值，表示该值是否为Set的成员。
	 *	clear()：清除所有成员，没有返回值。
	*/
	

	/**
	 * 	遍历方法:
	 * 	keys()：返回键名的遍历器
	 *	values()：返回键值的遍历器
	 *	entries()：返回键值对的遍历器
	 *	forEach()：使用回调函数遍历每个成员
	*/

	let set = new Set([1, 2, 3]);
	set = new Set([...set].map(x => x * 2));
	// 返回Set结构：{2, 4, 6}

	因此使用 Set 可以很容易地实现并集（Union）、交集（Intersect）和差集（Difference）
	let a = new Set([1, 2, 3]);
	let b = new Set([4, 3, 2]);

	// 并集
	let union = new Set([...a, ...b]);
	// Set {1, 2, 3, 4}

	// 交集
	let intersect = new Set([...a].filter(x => b.has(x)));
	// set {2, 3}

	// 差集
	let difference = new Set([...a].filter(x => !b.has(x)));
	// Set {1}

2.WeakSet
	WeakSet 结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有两个区别。
	首先，WeakSet 的成员只能是对象，而不能是其他类型的值。

	WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。

	方法：
	WeakSet.prototype.add(value)：向 WeakSet 实例添加一个新成员。
	WeakSet.prototype.delete(value)：清除 WeakSet 实例的指定成员。
	WeakSet.prototype.has(value)：返回一个布尔值，表示某个值是否在 WeakSet 实例之中。

3.Map
	3.1	Map类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 	结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适。

	const m = new Map();
	const o = {p: 'Hello World'};

	m.set(o, 'content')
	m.get(o) // "content"

	m.has(o) // true
	m.delete(o) // true
	m.has(o) // false

	Map接收数组作为参数：
	const map = new Map([
	  ['name', '张三'],
	  ['title', 'Author']
	]);

	map.size // 2
	map.has('name') // true
	map.get('name') // "张三"
	map.has('title') // true
	map.get('title') // "Author

	只有对同一个对象的引用，Map 结构才将其视为同一个键。这一点要非常小心。

	3.2	Map实例的属性和操作方法 

		(1)	size属性：size属性返回 Map 结构的成员总数
			let m1 = new Map();
			m1.set('a',true);
			m1.set('b',true);
			m1.size  // 2
		(2)	set(key, value):set方法设置键名key对应的键值为value，然后返回整个 Map 结构。如果key已经有值，则键值会被更新，否则就新生成该键。
			set方法返回的是当前的Map对象，因此可以采用链式写法。
		(3)	get(key):get方法读取key对应的键值，如果找不到key，返回undefined。
		(4)	has(key):has方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。
		(5)	delete(key):delete方法删除某个键，返回true。如果删除失败，返回false。
		(6)	clear():clear方法清除所有成员，没有返回值。

	3.3	遍历方法：

		keys()：返回键名的遍历器。
		values()：返回键值的遍历器。
		entries()：返回所有成员的遍历器。
		forEach()：遍历 Map 的所有成员。

		需要特别注意的是，Map 的遍历顺序就是插入顺序。

		Map 结构转为数组结构，比较快速的方法是使用扩展运算符（...）。

		const map = new Map([
		  [1, 'one'],
		  [2, 'two'],
		  [3, 'three'],
		]);

		[...map.keys()]
		// [1, 2, 3]

		[...map.values()]
		// ['one', 'two', 'three']

		[...map.entries()]
		// [[1,'one'], [2, 'two'], [3, 'three']]

		[...map]
		// [[1,'one'], [2, 'two'], [3, 'three']]

	3.4	与其他数据结构的互相转换
		3.4.1 Map转为数组
			Map 转为数组最方便的方法，就是使用扩展运算符（...）。
		3.4.2 数组 转为 Map
			new Map([
			  [true, 7],
			  [{foo: 3}, ['abc']]
			])
		3.4.3 Map 转为对象
			for (let [key, value] of map) {
			  console.log(key, value);
			}
		3.4.4 对象转为Map
			set(key) 封装函数
		3.4.5 Map转为JSON
			Map 转为 JSON 要区分两种情况。一种情况是，Map 的键名都是字符串，这时可以选择转为对象 JSON。
				步骤： 	1.Map转为obj
					  	2.JSON.stringify(obj)
			另一种情况是，Map 的键名有非字符串，这时可以选择转为数组 JSON。
				步骤：	1.Map转为array
						2.JSON.stirngify(array)
		3.4.6 JSON转为Map
			JSON 转为 Map，正常情况下，所有键名都是字符串。
				步骤： 	1.JSON.parse()转为JSON对象
						2.JSON对象转为Map
			有一种特殊情况，整个 JSON 就是一个数组，且每个数组成员本身，又是一个有两个成员的数组。这时，它可以一一对应地转为 Map。这往往是 Map 转为数组 JSON 的逆操作。

			function jsonToMap(jsonStr) {
			  return new Map(JSON.parse(jsonStr));
			}
			jsonToMap('[[true,7],[{"foo":3},["abc"]]]')

4.WeakMap
	
	区别：	
		首先，WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名。
		其次，WeakMap的键名所指向的对象，不计入垃圾回收机制。

	WeakMap的设计目的在于，有时我们想在某个对象上面存放一些数据，但是这会形成对于这个对象的引用。

	WeakMap只有四个方法可用：get()、set()、has()、delete()。
	