数值的扩展

1.	二进制和八进制表示法 (略过)
2.	Number.isFinite() , Number.isNaN()
	es6新提供了两个方法
	Number.isFinite()：用来检查一个数值是否为有限的（finite），即不是Infinity。注意，如果参数类型不是数值，Number.isFinite一律返回false。
	Number.isNaN()：用来检查一个值是否为NaN。
3.	Number.parseInt(), Number.parseFloat()
	ES6 将全局方法parseInt()和parseFloat()，移植到Number对象上面，行为完全保持不变。这样做的目的，是逐步减少全局性方法，使得语言逐步模块化。
4.	Number.isInteger()
	Number.isInteger()用来判断一个数值是否为整数。
	如果对数据精度的要求较高，不建议使用Number.isInteger()判断一个数值是否为整数。
5.	Number.EPSILON:新增一个极小的常量Number.EPSILON。根据规格，它表示 1 与大于 1 的最小浮点数之间的差。
6.	安全整数和 Number.isSafeInteger()
7.	Math对象的扩展
	7.1	Math.trunc()
		Math.trunc方法用于去除一个数的小数部分，返回整数部分。（不四舍五入）
	7.2	Math.sign()
		Math.sign方法用来判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值。
		它会返回五个值：
			参数为正数，返回+1；
			参数为负数，返回-1；
			参数为 0，返回0；
			参数为-0，返回-0;
			其他值，返回NaN。
	7.3 Math.cbrt()
		用来计算一个数的立方根
	7.4	Math.cbrt()
		Math.hypot方法返回所有参数的平方和的平方根。
8.	指数运算符
	ES2016 新增了一个指数运算符（**）。
	这个运算符的一个特点是右结合，而不是常见的左结合。多个指数运算符连用时，是从最右边开始计算的。
		2 ** 2 // 4
		2 ** 3 // 8
		// 相当于 2 ** (3 ** 2)
		2 ** 3 ** 2
		// 512
	指数运算符可以与等号结合，形成一个新的赋值运算符（**=）
		let a = 1.5;
		a **= 2;
		// 等同于 a = a * a;

		let b = 4;
		b **= 3;
		// 等同于 b = b * b * b;

	
	