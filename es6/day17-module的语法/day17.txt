1.概述
	ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。比如，CommonJS 模块就是对象，输入时必须查找对象属性。

	// CommonJS模块
	let { stat, exists, readFile } = require('fs');

	// 等同于
	let _fs = require('fs');
	let stat = _fs.stat;
	let exists = _fs.exists;
	let readfile = _fs.readfile;

	上面代码的实质是整体加载fs模块（即加载fs的所有方法），生成一个对象（_fs），然后再从这个对象上面读取3个方法。这种加载称为“运行时加载”，因为只有运行时才能得到这个对象，导致完全没办法在编译时做“静态优化”。

	ES6 模块不是对象，而是通过export命令显式指定输出的代码，再通过import命令输入。
	// ES6模块
	import { stat, exists, readFile } from 'fs';

	由于ES6模块是编译时加载，使得静态分析成为可能。有了它，就能进一步拓宽JavaScript的语法，比如引入宏（macro）和类型检验（typesystem）这些只能靠静态分析实现的功能

	ES6加载优势：
	不再需要UMD模块格式了，将来服务器和浏览器都会支持 ES6 模块格式。目前，通过各种工具库，其实已经做到了这一点。
	将来浏览器的新 API 就能用模块格式提供，不再必须做成全局变量或者navigator对象的属性。
	不再需要对象作为命名空间（比如Math对象），未来这些功能可以通过模块提供

2.严格模式
	严格模式限制：
		变量必须声明后再使用
		函数的参数不能有同名属性，否则报错
		不能使用with语句
		不能对只读属性赋值，否则报错
		不能使用前缀 0 表示八进制数，否则报错
		不能删除不可删除的属性，否则报错
		不能删除变量delete prop，会报错，只能删除属性delete global[prop]
		eval不会在它的外层作用域引入变量
		eval和arguments不能被重新赋值
		arguments不会自动反映函数参数的变化
		不能使用arguments.callee
		不能使用arguments.caller
		禁止this指向全局对象
		不能使用fn.caller和fn.arguments获取函数调用的堆栈
		增加了保留字（比如protected、static和interface）

3.export命令
	模块功能主要由两个命令构成：export和import。export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。
	export命令除了输出变量，还可以输出函数或类（class）。
	通常情况下，export输出的变量就是本来的名字，但是可以使用as关键字重命名。

	//重命名导出变量
	function v1() { ... }
	function v2() { ... }
	export {
	  v1 as streamV1,
	  v2 as streamV2,
	  v2 as streamLatestVersion
	};

	export命令规定的是对外的接口，必须与模块内部的变量建立一一对应关系。它们的实质是，在接口名与模块内部变量之间，建立了一一对应的关系。（导出的是一个用承接值的变量）

	export语句输出的接口，与其对应的值是动态绑定关系，即通过该接口，可以取到模块内部实时的值。

4.import 命令 
	使用export命令定义了模块的对外接口以后，其他 JS 文件就可以通过import命令加载这个模块。

	import命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同。

	import命令输入的变量都是只读的，因为它的本质是输入接口。也就是说，不允许在加载模块的脚本里面，改写接口。但是，如果是一个对象，改写对象的属性是允许的。

	import后面的from指定模块文件的位置，可以是相对路径，也可以是绝对路径，.js后缀可以省略。如果只是模块名，不带有路径，那么必须有配置文件，告诉 JavaScript 引擎该模块的位置。

	注意，import命令具有提升效果，会提升到整个模块的头部，首先执行。

	由于import是静态执行，所以不能使用表达式和变量，这些只有在运行时才能得到结果的语法结构。

5.模块的整体加载
	除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面。
	注意，模块整体加载所在的那个对象（上例是circle），应该是可以静态分析的，所以不允许运行时改变。下面的写法都是不允许的。

6.export default 命令
	为了给用户提供方便，让他们不用阅读文档就能加载模块，就要用到export default命令，为模块指定默认输出。
	export default命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此exportdefault命令只能使用一次。所以，import命令后面才不用加大括号，因为只可能唯一对应export default命令。

7.export 与 import 的复合写法
	
	export { foo, bar } from 'my_module';
	// 可以简单理解为
	import { foo, bar } from 'my_module';
	export { foo, bar };

8.模块的继承
	模块之间也可以继承。

9.跨模块常量
	如果要使用的常量非常多，可以建一个专门的constants目录，将各种常量写在不同的文件里面，保存在该目录下。
	// constants/db.js
	export const db = {
	  url: 'http://my.couchdbserver.local:5984',
	  admin_username: 'admin',
	  admin_password: 'admin password'
	};

	// constants/user.js
	export const users = ['root', 'admin', 'staff', 'ceo', 'chief', 'moderator'];

	//引入
	import {db, users} from './constants/index';

10.import()
	
	import和export命令只能在模块的顶层，不能在代码块之中（比如，在if代码块之中，或在函数之中）。

	import函数的参数specifier，指定所要加载的模块的位置。import命令能够接受什么参数，import()函数就能接受什么参数，两者区别主要是后者为动态加载。
	使用场合：
		1.按需加载
			import()可以在需要的时候，再加载某个模块。
		2.条件加载
			import()可以放在if代码块，根据不同的情况，加载不同的模块。
		3.动态的模块路径
			import()允许模块路径动态生成。(根据函数返回值动态加载)
