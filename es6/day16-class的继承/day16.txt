1.简介
	Class 可以通过extends关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。

	子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类自己的this对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用super方法，子类就得不到this对象。

	class ColorPoint extends Point {
	  constructor(x, y, color) {
	    super(x, y); // 调用父类的constructor(x, y)
	    this.color = color;
	  }

	  toString() {
	    return this.color + ' ' + super.toString(); // 调用父类的toString()
	  }
	}

	ES5 的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面（Parent.apply(this)）。ES6 的继承机制完全不同，实质是先将父类实例对象的属性和方法，加到this上面（所以必须先调用super方法），然后再用子类的构造函数修改this。

	在子类的构造函数中，只有调用super之后，才可以使用this关键字，否则会报错。这是因为子类实例的构建，基于父类实例，只有super方法才能调用父类实例。

	父类的静态方法，也会被子类继承。

2.Object.getPrototypeOf()
	Object.getPrototypeOf方法可以用来从子类上获取父类。
3.super 关键字
	super这个关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。
	
	第一种情况，super作为函数调用时，代表父类的构造函数。ES6 要求，子类的构造函数必须执行一次super函数
		class A {}

		class B extends A {
		  constructor() {
		    super();
		  }
		}
		
		class A {
		  constructor() {
		    console.log(new.target.name);
		  }
		}
		class B extends A {
		  constructor() {
		    super();
		  }
		}
		new A() // A
		new B() // B
		new.target指向当前正在执行的函数。可以看到，在super()执行时，它指向的是子类B的构造函数，而不是父类A的构造函数。也就是说，super()内部的this指向的是B。

	第二种情况，super作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。
		这里需要注意，由于super指向父类的原型对象，所以定义在父类实例上的方法或属性，是无法通过super调用的。

		由于this指向子类实例，所以如果通过super对某个属性赋值，这时super就是this，赋值的属性会变成子类实例的属性。


		class A {
		  constructor() {
		    this.x = 1;
		  }
		}

		class B extends A {
		  constructor() {
		    super();
		    this.x = 2;
		    super.x = 3;	// super代表子类实例  也就是 this
		    console.log(super.x); // undefined   指向A的原型的属性  
		    console.log(this.x); // 3
		  }
		}

		let b = new B();

		super在静态方法之中指向父类，在普通方法之中指向父类的原型对象。
		在子类的静态方法中通过super调用父类的方法时，方法内部的this指向当前的子类，而不是子类的实例。

4.类的 prototype 属性和__proto__属性
	
	大多数浏览器的 ES5 实现之中，每一个对象都有__proto__属性，指向对应的构造函数的prototype属性。Class作为构造函数的语法糖，同时有prototype属性和__proto__属性，因此同时存在两条继承链。

	1.子类的__proto__属性，表示构造函数的继承，总是指向父类。
	2.子类prototype属性的__proto__属性，表示方法的继承，总是指向父类的prototype属性。