宏任务和微任务

	但是js异步有一个机制，就是遇到宏任务，先执行宏任务，将宏任务放入eventqueue，然后再执行微任务，将微任务放入eventqueue最骚的是，这两个queue不是一个queue。当你往外拿的时候先从微任务里拿这个回掉函数，然后再从宏任务的queue上拿宏任务的回掉函数。

	宏任务：包括整体代码script，setTimeout，setInterval。

	微任务：Promise，process.nextTick。

 

async / await
	
	函数前面的async一词意味着一个简单的事情：这个函数总是返回一个promise，如果代码中有return <非promise>语句，JavaScript会自动把返回的这个value值包装成promise的resolved值。

	关键词await可以让JavaScript进行等待，直到一个promise执行并返回它的结果，JavaScript才会继续往下执行

	
	当调用一个 async 函数时，会返回一个 Promise 对象。当这个 async 函数返回一个值时，Promise 的 resolve 方法会负责传递这个值；当 async 函数抛出异常时，Promise 的 reject 方法也会传递这个异常值。
	async 函数中可能会有 await 表达式，这会使 async 函数暂停执行，等待 Promise  的结果出来，然后恢复async函数的执行并返回解析值（resolved）。
	async/await的用途是简化使用 promises 异步调用的操作，并对一组 Promises执行某些操作。正如Promises类似于结构化回调，async/await类似于组合生成器和 promises。




1.Promise的含义
	特点：
		1.1	对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。
		1.2	一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的
		1.3	有了Promise对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供统一的接口，使得控制异步操作更加容易。
2.基本用法：
	ES6 规定，Promise对象是一个构造函数，用来生成Promise实例。

	const promise = new Promise(function(resolve, reject) {
	  // ... some code
	  
	  if (/* 异步操作成功 */){
	    resolve(value);
	  } else {
	    reject(error);
	  }
	});

	Promise实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。

	promise.then(function(value) {
		  // success
		}, function(error) {
		  // failure
		});


	const getJSON = function(url) {
	  const promise = new Promise(function(resolve, reject){
	    const handler = function() {
	      if (this.readyState !== 4) {
	        return;
	      }
	      if (this.status === 200) {
	        resolve(this.response);
	      } else {
	        reject(new Error(this.statusText));
	      }
	    };
	    const client = new XMLHttpRequest();
	    client.open("GET", url);
	    client.onreadystatechange = handler;
	    client.responseType = "json";
	    client.setRequestHeader("Accept", "application/json");
	    client.send();

	  });

	  return promise;
	};

	getJSON("/posts.json").then(function(json) {
	  console.log('Contents: ' + json);
	}, function(error) {
	  console.error('出错了', error);
	});

3.	Promise.prototype.then()
	Promise 实例具有then方法，也就是说，then方法是定义在原型对象Promise.prototype上的。它的作用是为 Promise 实例添加状态改变时的回调函数。前面说过，then方法的第一个参数是resolved状态的回调函数，第二个参数（可选）是rejected状态的回调函数。

4.	Promise.prototype.catch()
	Promise.prototype.catch方法是.then(null, rejection)的别名，用于指定发生错误时的回调函数。

	// good
	promise
	  .then(function(data) { //cb
	    // success
	  })
	  .catch(function(err) {
	    // error
	  });

	Promise 内部的错误不会影响到 Promise 外部的代码

5.	Promise.prototype.finally()
	
	finally方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。

	promise
	.then(result => {···})
	.catch(error => {···})
	.finally(() => {···});

	finally方法里面的操作，应该是与状态无关的，不依赖于 Promise 的执行结果。

6.	Promise.all() 
	Promise.all方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。

7. 	Promise.race()
	Promise.race方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。

8.	Promise.resolve()
	有时需要将现有对象转为 Promise 对象，Promise.resolve方法就起到这个作用。

	Promise.resolve方法的参数分成四种情况。
		1.如果参数是 Promise 实例，那么Promise.resolve将不做任何修改、原封不动地返回这个实例。
		2.thenable对象指的是具有then方法的对象，比如下面这个对象。Promise.resolve方法会将这个对象转为 Promise 对象，然后就立即执行thenable对象的then方法。
		3.如果参数是一个原始值，或者是一个不具有then方法的对象，则Promise.resolve方法返回一个新的 Promise 对象，状态为resolved。
		4.Promise.resolve方法允许调用时不带参数，直接返回一个resolved状态的 Promise 对象。
9.	Promise.reject()
	Promise.reject(reason)方法也会返回一个新的 Promise 实例，该实例的状态为rejected。