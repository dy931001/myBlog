对象的扩展

1.	属性的简介表示法
	ES6 允许直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。
2.	属性名表达式
	JavaScript 定义对象的属性，有两种方法。
	// 方法一
	obj.foo = true;

	// 方法二
	obj['a' + 'bc'] = 123;
3.	方法的name属性
	函数的name属性，返回函数名。对象方法也是函数，因此也有name属性。
4.	Object.is()
	ES6 提出“Same-value equality”（同值相等）算法，用来解决这个问题。Object.is就是部署这个算法的新方法。它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。
	Object.is('foo', 'foo')
	// true
	Object.is({}, {})
	// false
5.	Object.assign()
	Object.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。
	5.1	浅拷贝
		Object.assign方法实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。
	5.2	同名属性的替换
		对于这种嵌套的对象，一旦遇到同名属性，Object.assign的处理方法是替换，而不是添加。
	5.3	数组的处理
	5.4	取值函数的处理
		Object.assign只能进行值的复制，如果要复制的值是一个取值函数，那么将求值后再复制。
6.	属性的可枚举性和遍历
	6.1	可枚举性
	6.2	属性的遍历
		ES6 一共有 5 种方法可以遍历对象的属性。
		6.2.1	for...in
				for...in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。
		6.2.2	Object.keys(obj)
				Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。
		6.2.3	Object.getOwnPropertyNames(obj)
				Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。
		6.2.4	Object.getOwnPropertySymbols(obj)
				Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性的键名。
		6.2.5	Reflect.ownKeys(obj)
				Reflect.ownKeys返回一个数组，包含对象自身的所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。

8.	__proto__属性，Object.setPrototypeOf()，Object.getPrototypeOf()
	JavaScript 语言的对象继承是通过原型链实现的。ES6 提供了更多原型对象的操作方法。
	Object.setPrototypeOf():
		Object.setPrototypeOf方法的作用与__proto__相同，用来设置一个对象的prototype对象，返回参数对象本身。它是 ES6 正式推荐的设置原型对象的方法。
		let proto = {};
		let obj = { x: 10 };
		Object.setPrototypeOf(obj, proto);

		proto.y = 20;
		proto.z = 40;

		obj.x // 10
		obj.y // 20
		obj.z // 40
		上面代码将proto对象设为obj对象的原型，所以从obj对象可以读取proto对象的属性。
	Object.getPrototypeOf():
		该方法与Object.setPrototypeOf方法配套，用于读取一个对象的原型对象。
9.	super关键字
	我们知道，this关键字总是指向函数所在的当前对象，ES6 又新增了另一个类似的关键字super，指向当前对象的原型对象。
	注意，super关键字表示原型对象时，只能用在对象的方法之中，用在其他地方都会报错。
10.	Object.values()
	Object.values方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值。
11.	Object.entries()
	Object.entries方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组。