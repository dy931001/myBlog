对象的扩展

1.	属性的简介表示法
	ES6 允许直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。
2.	属性名表达式
	JavaScript 定义对象的属性，有两种方法。
	// 方法一
	obj.foo = true;

	// 方法二
	obj['a' + 'bc'] = 123;
3.	方法的name属性
	函数的name属性，返回函数名。对象方法也是函数，因此也有name属性。
4.	Object.is()
	ES6 提出“Same-value equality”（同值相等）算法，用来解决这个问题。Object.is就是部署这个算法的新方法。它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。
	Object.is('foo', 'foo')
	// true
	Object.is({}, {})
	// false
5.	Object.assign()
	5.1	基本用法
		Object.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。
		const target = { a: 1 };
		const source1 = { b: 2 };
		const source2 = { c: 3 };

		Object.assign(target, source1, source2);
		target // {a:1, b:2, c:3}
		Object.assign方法的第一个参数是目标对象，后面的参数都是源对象。
		注意，如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。
		由于undefined和null无法转成对象，所以如果它们作为参数，就会报错。
		如果非对象参数出现在源对象的位置（即非首参数），那么处理规则有所不同。首先，这些参数都会转成对象，如果无法转成对象，就会跳过。如果undefined和null不在首参数，就不会报错。
	5.2	注意点
		(1)	浅拷贝
			Object.assign方法实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。	
		(2)	同名属性的替换
			对于这种嵌套的对象，一旦遇到同名属性，Object.assign的处理方法是替换，而不是添加。
		(3)	数组的处理
			Object.assign可以用来处理数组，但是会把数组视为对象。(同下标会覆盖)
		(4)	取值函数的处理
			Object.assign只能进行值的复制，如果要复制的值是一个取值函数，那么将求值后再复制。
	5.3	常见用途
		(1)	为对象添加属性
			class Point {
			  constructor(x, y) {
			    Object.assign(this, {x, y});
			  }
			}
			上面方法通过Object.assign方法，将x属性和y属性添加到Point类的对象实例。
		(2)	为对象添加方法
		(3)	克隆对象
		(4)	合并多个对象
			const merge = (...sources) => Object.assign({}, ...sources);
		(5)	为属性指定默认值
6.	属性的可枚举性和遍历
	6.1	可枚举性
		对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象。
	6.2	属性的遍历
		ES6 一共有 5 种方法可以遍历对象的属性。
		（1）for...in
			 for...in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。
		（2）Object.keys(obj)
			 Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。
		（3）Object.getOwnPropertyNames(obj)
			 Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。
		（4）Object.getOwnPropertySymbols(obj)
			 Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性的键名。
		（5）Reflect.ownKeys(obj)
			 Reflect.ownKeys返回一个数组，包含对象自身的所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。
		以上的 5 种方法遍历对象的键名，都遵守同样的属性遍历的次序规则。
		
9.	super关键字
	我们知道，this关键字总是指向函数所在的当前对象，ES6 又新增了另一个类似的关键字super，指向当前对象的原型对象。
	const proto = {
	  foo: 'hello'
	};

	const obj = {
	  foo: 'world',
	  find() {
	    return super.foo;
	  }
	};

	Object.setPrototypeOf(obj, proto);
	obj.find() // "hello"

10.	Object.keys()，Object.values()，Object.entries()
	Object.keys()
		ES5 引入了Object.keys方法，返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名。
	Object.entries()
		Object.entries方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组。
	
