1.简介
	JavaScript 语言中，生成实例对象的传统方法是通过构造函数。

	ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。

	ES6 的class可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已

	//定义类
	class Point {
	  constructor(x, y) {
	    this.x = x;
	    this.y = y;
	  }

	  toString() {
	    return '(' + this.x + ', ' + this.y + ')';
	  }
	}

	类的内部所有定义的方法，都是不可枚举的（non-enumerable）
2.严格模式
	类和模块的内部，默认就是严格模式，所以不需要使用use strict指定运行模式。
3.constructor 方法
	constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。
4.类的实例对象
	生成类的实例对象的写法，与 ES5 完全一样，也是使用new命令
	与 ES5 一样，实例的属性除非显式定义在其本身（即定义在this对象上），否则都是定义在原型上（即定义在class上）

	与 ES5 一样，类的所有实例共享一个原型对象，可以通过实例的__proto__属性为“类”添加方法
5.Class表达式
	与函数一样，类也可以使用表达式的形式定义。
	const MyClass = class Me {
	  getClassName() {
	    return Me.name;
	  }
	};
	上面代码使用表达式定义了一个类。需要注意的是，这个类的名字是MyClass而不是Me，Me只在 Class 的内部代码可用，指代当前类。
	如果类的内部没用到的话，可以省略Me，也就是可以写成下面的形式。
	const MyClass = class { /* ... */ };

6.不存在变量提升
	类使用在前，定义在后，这样会报错，因为 ES6 不会把类的声明提升到代码头部。这种规定的原因与下文要提到的继承有关，必须保证子类在父类之后定义。

7.私有方法和私有属性
8.类的指向
	类的方法内部如果含有this，它默认指向类的实例。但是，必须非常小心，一旦单独使用该方法，很可能报错。
9.name属性
	ES6 的类只是 ES5 的构造函数的一层包装，所以函数的许多特性都被Class继承，包括name属性。
10.Class 的取值函数（getter）和存值函数（setter）
	与 ES5 一样，在“类”的内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。
11.Class 的 Generator 方法
	如果某个方法之前加上星号（*），就表示该方法是一个 Generator 函数。
12.Class 的静态方法
	类相当于实例的原型，所有在类中定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。
	注意，如果静态方法包含this关键字，这个this指的是类，而不是实例。
	
	静态方法可以与非静态方法重名。

	父类的静态方法，可以被子类继承。
	class Foo {
	  static classMethod() {
	    return 'hello';
	  }
	}

	class Bar extends Foo {
	}

	Bar.classMethod() // 'hello'

	静态方法也是可以从super对象上调用的。
	class Foo {
	  static classMethod() {
	    return 'hello';
	  }
	}

	class Bar extends Foo {
	  static classMethod() {
	    return super.classMethod() + ', too';
	  }
	}

	Bar.classMethod() // "hello, too"

13.Class 的静态属性和实例属性
	静态属性指的是 Class 本身的属性，即Class.propName，而不是定义在实例对象（this）上的属性。
	ES6 明确规定，Class 内部只有静态方法，没有静态属性。

	// 以下两种写法都无效
	class Foo {
	  // 写法一
	  prop: 2

	  // 写法二
	  static prop: 2
	}

	Foo.prop // undefined

	13.1 类的实例属性
	13.2 类的静态属性
			类的静态属性只要在上面的实例属性写法前面，加上static关键字就可以了。

14.new.target 属性
	ES6 为new命令引入了一个new.target属性，该属性一般用在构造函数之中，返回new命令作用于的那个构造函数。如果构造函数不是通过new命令调用的，new.target会返回undefined，因此这个属性可以用来确定构造函数是怎么调用的。

	需要注意的是，子类继承父类时，new.target会返回子类。