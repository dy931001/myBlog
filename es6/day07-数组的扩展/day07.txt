数组的扩展

1.	扩展运算符
	1.1	含义：扩展运算符（spread）是三个点（...）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。
		该运算符主要用于函数调用。
		function push(array, ...items) {
		  array.push(...items);
		}

		function add(x, y) {
		  return x + y;
		}

		const numbers = [4, 38];
		add(...numbers) // 42
	1.2	替代函数的 apply 方法
		let arr1 = [0, 1, 2];
		let arr2 = [3, 4, 5];
		arr1.push(...arr2); // arr1:[0, 1, 2, 3, 4, 5]  arr2:[3, 4, 5]
	1.3	扩展运算符的应用
			(1)	复制数组
				数组是复合类型的数组，直接复制的话，只是复制了指向底层数据结构的指针。而不是克隆一个全新的数组。
				es5复制数组的方法：
				const a1 = [1, 2];
				const a2 = a1.concat(); //concat返回一个新数组

				扩展运算符的复制方法： const a1 = [1,2]; const a2 = [...a1];
			(2)	合并数组
				let b1 = [1,2],b2 = [3,4],b3 = [5,6];
				let b4 = [...b1,...b2,...b3];
			(3)	与解构赋值结合
				如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。
			(4)	字符串
				扩展运算符还可以将字符串转为真正的数组。
				[...'str']
			(5)	实现了 Iterator 接口的对象
				任何 Iterator 接口的对象（参阅 Iterator 一章），都可以用扩展运算符转为真正的数组。
			(6)	Map 和 Set 结构，Generator 函数
				扩展运算符内部调用的是数据结构的 Iterator 接口，因此只要具有 Iterator 接口的对象，都可以使用扩展运算符，比如 Map 结构。

2.	Array.from()
	Array.from方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）。
	let arrayLike = {
	    '0': 'a',
	    '1': 'b',
	    '2': 'c',
	    length: 3
	};
	// ES5的写法
	var arr1 = [].slice.call(arrayLike); // ['a', 'b', 'c']

	// ES6的写法
	let arr2 = Array.from(arrayLike); // ['a', 'b', 'c']
	实际应用中，常见的类似数组的对象是 DOM 操作返回的 NodeList 集合，以及函数内部的arguments对象。Array.from都可以将它们转为真正的数组。
3.	Array.of()
	Array.of方法用于将一组值，转换为数组。
4.	数组实例的copyWithin()
	数组实例的copyWithin方法，在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。也就是说，使用这个方法，会修改当前数组。
	Array.prototype.copyWithin(target, start = 0, end = this.length)
	target（必需）：从该位置开始替换数据。如果为负值，表示倒数。
	start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示倒数。
	end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。
	[1, 2, 3, 4, 5].copyWithin(0, 3)
	// [4, 5, 3, 4, 5]
	上面代码表示将从 3 号位直到数组结束的成员（4 和 5），复制到从 0 号位开始的位置，结果覆盖了原来的 1 和 2。
5.	数组实例的 find() 和 findIndex()
	数组实例的find方法，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，则返回undefined。
	[1, 4, -5, 10].find((n) => n < 0)
	// -5

	数组实例的findIndex方法的用法与find方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。

8.	数组实例的 includes()
	Array.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似。ES2016 引入了该方法。
	[1,2,3].includes(2)
	该方法的第二个参数表示搜索的起始位置，默认为0。如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为-4，但数组长度为3），则会重置为从0开始。

	indexOf方法有两个缺点，一是不够语义化，它的含义是找到参数值的第一个出现位置，所以要去比较是否不等于-1，表达起来不够直观。二是，它内部使用严格相等运算符（===）进行判断，这会导致对NaN的误判。

9.	数组实例的 flat()，flatMap()
	数组的成员有时还是数组，Array.prototype.flat()用于将嵌套的数组“拉平”，变成一维的数组。该方法返回一个新数组，对原数据没有影响。
	[1,2,3,[4,5]].flat()
	flat()默认只会“拉平”一层，如果想要“拉平”多层的嵌套数组，可以将flat()方法的参数写成一个整数，表示想要拉平的层数，默认为1。
	如果不管有多少层嵌套，都要转成一维数组，可以用Infinity关键字作为参数。
	[1,2,3,[4,5,[6,[7,[8]]]]].flat(Infinity)
	[1, 2, 3, 4, 5, 6, 7, 8]

10.	数组的空位
	
	
	
				


